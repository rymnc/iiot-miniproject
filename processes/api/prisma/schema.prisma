generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  firstName        String
  lastName         String?
  email            String             @unique
  password         String
  DeviceDetails    DeviceDetails[]
  Tokens           Tokens[]
  UserActions      UserActions[]
  UserLoginHistory UserLoginHistory[]
}

model DeviceDetails {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  userId     Int
  deviceId   String      @unique @default(uuid())
  deviceType DeviceTypes
  healthy    Boolean     @default(true)
  deviceName String
  user       User        @relation(fields: [userId], references: [id])

  @@unique([deviceName, userId], name: "device_name_unique_per_user")
}

model Tokens {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  userId    Int
  type      TokenType
  value     String    @unique
  user      User      @relation(fields: [userId], references: [id])
}

model UserActions {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  userId    Int
  type      ActionType
  table     Tables
  user      User       @relation(fields: [userId], references: [id])
}

model UserLoginHistory {
  id         Int      @id @default(autoincrement())
  loggedInAt DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
}

enum DeviceTypes {
  SENSOR
  ASSISTANT
  AUTOMATION
  SECURITY
}

enum TokenType {
  REFRESH
  ACCESS
}

enum ActionType {
  CREATE
  READ
  UPDATE
  DELETE
}

enum Tables {
  User
  DeviceDetails
  Tokens
  UserActions
}
